<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopping Cart</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <link rel="icon" href="/images/icon.png">
    <style>
        html, body {
            height: 100%;
            margin: 0;
            background-color: #000;
            color: #fff;
            font-family: Arial, sans-serif;
        }

        body {
            display: flex;
            flex-direction: column;
        }

        .content {
            flex: 1;
            padding-bottom: 40px;
        }

        .navbar-custom {
            background-color: #000;
            padding: 10px 0;
        }

        .navbar-custom .navbar-brand,
        .navbar-custom .nav-link {
            color: #fff;
        }

        .navbar-custom .nav-link:hover {
            color: #d4edda;
        }

        .navbar-toggler {
            border: none;
        }

        .navbar-toggler-icon {
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'%3E%3Cpath stroke='rgba(255, 255, 255, 0.8)' stroke-width='2' stroke-linecap='round' stroke-miterlimit='10' d='M4 7h22M4 15h22M4 23h22'/%3E%3C/svg%3E");
        }

        .cart-item {
            border-bottom: 1px solid #444;
            padding: 15px;
            background-color: #1c1c1c;
            border-radius: 5px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .cart-item h5 {
            font-size: 1.2rem;
            margin: 0;
            color: #fff;
        }

        .cart-item p {
            margin: 5px 0;
            color: #ccc;
        }

        .cart-item .btn {
            font-size: 0.9rem;
        }

        .total {
            font-size: 1.5rem;
            font-weight: bold;
            color: #035925;
            margin-top: 20px;
        }

        .btn-custom {
            background-color: #000;
            color: #fff;
            border: none;
            padding: 8px 15px;
        }

        .btn-custom:hover {
            background-color: #333;
            color: #d4edda;
        }

        .btn-checkout {
            background-color: #035925;
            color: #fff;
            border: none;
            padding: 10px 20px;
        }

        .btn-checkout:hover {
            background-color: #028a1b;
        }

        .btn-explore {
            background-color: #000;
            color: #fff;
            border: none;
            padding: 10px 20px;
        }

        .btn-explore:hover {
            background-color: #333;
            color: #d4edda;
        }

        .footer {
            background-color: #000;
            color: #fff;
            padding: 10px 0;
            text-align: center;
            position: relative;
            width: 100%;
        }

        .modal-content {
            border-radius: 8px;
            background-color: #1c1c1c;
            color: #fff;
        }

        .modal-header, .modal-footer {
            border-color: #444;
        }

        .modal-body .form-control {
            background-color: #333;
            color: #fff;
            border: 1px solid #444;
        }

        .modal-body .form-control:focus {
            background-color: #444;
            border-color: #035925;
            color: #fff;
        }

        .modal-footer .btn {
            border-radius: 5px;
        }

        .close {
            color: #fff;
            opacity: 0.8;
        }

        .close:hover {
            opacity: 1;
        }

        @media (max-width: 768px) {
            .cart-item {
                flex-direction: column;
                text-align: center;
            }

            .cart-item div {
                margin-bottom: 10px;
            }

            .total {
                font-size: 1.2rem;
            }
        }

        .notification-container {
            position: fixed;
            top: 15%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 1060;
        }

        .notification {
            background-color: #1c1c1c;
            border: 1px solid #444;
            border-radius: 5px;
            margin-bottom: 8px;
            width: 300px;
            height: auto;
            padding: 15px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            color: #fff;
            text-align: center;
        }

        .notification-success {
            background-color: #035925;
            border: 1px solid #028a1b;
            color: #fff;
        }

        .notification-danger {
            background-color: #721c24;
            border: 1px solid #f5c6cb;
            color: #fff;
        }

        .notification-warning {
            background-color: #856404;
            border: 1px solid #ffeeba;
            color: #fff;
        }

        .notification-title {
            font-weight: bold;
            font-size: 1.1rem;
        }

        .notification-message {
            font-size: 0.9rem;
        }

        .fa-spinner {
            margin-right: 5px;
        }
    </style>
</head>
<body>

    <!-- Navigation Bar -->
    <nav class="navbar navbar-expand-lg navbar-custom mb-4">
        <a class="navbar-brand" href="/">
            <img src="/images/Cloud.png" alt="Logo" style="height: 50px; width: 250px;">
        </a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav"
            aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ml-auto">
                <li class="nav-item">
                    <a class="nav-link" href="/home"><i class="fas fa-home"></i> Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/products"><i class="fas fa-shopping-bag"></i> Products</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/auth/logout"><i class="fas fa-sign-out-alt"></i> Logout</a>
                </li>
            </ul>
        </div>
    </nav>

    <div class="content container mt-5">
        <h1 class="mb-4">Shopping Cart</h1>

<!-- Cart Items -->
<div class="cart-items">
    <% if (cart && cart.length > 0) { %>
        <% cart.forEach(function(item) { %>
            <div class="cart-item">
                <div>
                    <h5><%= item.productId.name %></h5>
                    <p>Price: KES <%= item.productId.price.toFixed(2) %></p>
                    <p>Quantity:
                        <button class="btn btn-custom" onclick="updateQuantity('<%= item._id %>', <%= item.quantity - 1 %>)">-</button>
                        <span id="quantity-<%= item._id %>"><%= item.quantity %></span>
                        <button class="btn btn-custom" onclick="updateQuantity('<%= item._id %>', <%= item.quantity + 1 %>, <%= item.productId.stockQuantity || Infinity %>)">+</button>
                    </p>
                </div>
                <div>
                    <button class="btn btn-custom" onclick="removeItem('<%= item._id %>')">
                        <i class="fas fa-trash-alt"></i> Remove
                    </button>
                </div>
            </div>
        <% }) %>
        <p class="total">Total: KES <%= total.toFixed(2) %></p>
        <div class="row mb-4">
            <div class="col-md-12 text-right">
                <button class="btn btn-checkout" data-toggle="modal" data-target="#checkoutModal">
                    <i class="fas fa-credit-card"></i> Proceed to Checkout
                </button>
            </div>
        </div>
    <% } else { %>
        <p>Your cart is empty.</p>
        <div class="text-center mt-4">
            <a href="/products" class="btn btn-explore"><i class="fas fa-search"></i> Explore Products</a>
        </div>
    <% } %>
</div>

<!-- Updated JavaScript -->
<script>
    function updateQuantity(itemId, newQuantity, maxStock = Infinity) {
        if (newQuantity < 1 || newQuantity > maxStock) {
            toastr.warning(`Quantity must be between 1 and ${maxStock}.`);
            return;
        }

        fetch(`/cart/update/${itemId}`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ quantity: newQuantity })
        })
        .then(response => {
            if (response.ok) {
                return response.json(); // Parse JSON response from server
            } else {
                throw new Error('Failed to update quantity');
            }
        })
        .then(data => {
            if (data.success) {
                // Update quantity display without full reload (optional enhancement)
                document.getElementById(`quantity-${itemId}`).textContent = newQuantity;
                document.querySelector('.total').textContent = `Total: KES ${data.total.toFixed(2)}`;
            } else {
                toastr.error(data.message || 'Failed to update quantity');
            }
        })
        .catch(error => {
            console.error('Update error:', error);
            toastr.error('An error occurred. Please try again.');
            location.reload(); // Fallback to reload if something goes wrong
        });
    }
</script>

    </div>


    <!-- Checkout Modal -->
    <div class="modal fade" id="checkoutModal" tabindex="-1" role="dialog" aria-labelledby="checkoutModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="checkoutModalLabel"><i class="fas fa-check-circle"></i> Checkout</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="checkoutForm" method="POST" action="/checkout">
                        <div class="form-group">
                            <label for="customerName">Name</label>
                            <input type="text" class="form-control" id="customerName" name="customerName" placeholder="Your Name" required>
                        </div>
                        <div class="form-group">
                            <label for="customerEmail">Email</label>
                            <input type="email" class="form-control" id="customerEmail" name="customerEmail" placeholder="Your Email" required>
                        </div>
                        <div class="form-group">
                            <label for="customerPhone">Phone Number</label>
                            <input type="tel" class="form-control" id="customerPhone" name="customerPhone" placeholder="Your Phone Number" required>
                        </div>
                        <div class="form-group">
                            <label for="customerLocation">Location</label>
                            <input type="text" class="form-control" id="customerLocation" name="customerLocation" placeholder="Your Apartment name and location" required>
                        </div>
                        <div class="form-group">
                            <label for="cartTotal">Cart Total</label>
                            <input type="number" class="form-control" id="cartTotal" name="cartTotal" value="<%= total.toFixed(2) %>" readonly>
                        </div>
                        <div id="umsPayContainer"></div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">
                        <i class="fas fa-times"></i> Cancel
                    </button>
                    <button type="button" class="btn btn-checkout" id="confirmCheckout">
                        <i class="fas fa-check"></i> Confirm Checkout
                    </button>
                </div>
            </div>
        </div>
    </div>


    <!-- Footer -->
    <footer class="footer">
        <p>© 2025 Cloud 420. All rights reserved.</p>
    </footer>


    <!-- Scripts -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>


    <!--Notification Functions / Cart Functions-->
    <script>
function removeItem(itemId) {
            fetch(`/cart/remove/${itemId}`, {
                method: 'DELETE'
            })
            .then(response => {
                if (response.ok) {
                    location.reload();
                } else {
                    toastr.error('Failed to remove item. Please try again.');
                }
            })
            .catch(error => {
                toastr.error('An error occurred. Please try again.');
            });
        }


        function showNotification(title, message, type, persistent = false, updateCallback = null) {
            const container = document.querySelector('.notification-container') || createNotificationContainer();
            const notification = document.createElement('div');
            notification.className = `notification notification-${type}`;
            notification.innerHTML = `<strong class="notification-title">${title}</strong><br><span class="notification-message">${message}</span>`;
            
            container.appendChild(notification);

            if (!persistent) {
                setTimeout(() => { notification.remove(); }, 3000);
            } else if (updateCallback) {
                updateCallback(notification);
            }

            return notification;
        }

        function createNotificationContainer() {
            const container = document.createElement('div');
            container.className = 'notification-container';
            document.body.appendChild(container);
            return container;
        }
        </script>

<!--Checkout logic-->
  <script>
    document.addEventListener('DOMContentLoaded', function () {
    const confirmCheckoutBtn = document.getElementById('confirmCheckout');
    const checkoutForm = document.getElementById('checkoutForm');

    if (!confirmCheckoutBtn || !checkoutForm) {
        console.error('Checkout elements not found in DOM');
        return;
    }

    // Email validation regex
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    // Phone validation (basic Kenyan phone number format)
    const phoneRegex = /^(?:254|\+254|0)?[7][0-9]{8}$/;

    confirmCheckoutBtn.addEventListener('click', async function (e) {
        e.preventDefault(); // Prevent default button behavior

        try {
            const formData = new FormData(checkoutForm);
            const data = Object.fromEntries(formData);

            // Enhanced field validation
            if (!validateFormData(data)) {
                return;
            }

            const processingNotification = showNotification(
                'Processing',
                '<i class="fas fa-spinner fa-spin"></i> Processing your order...',
                'info',
                true,
                async (notification) => {
                    const updateNotification = (title, message, type) => {
                        notification.querySelector('.notification-title').textContent = title;
                        notification.querySelector('.notification-message').innerHTML = message;
                        notification.className = `notification notification-${type}`;
                    };

                    try {
                        const response = await fetch('/checkout', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'Accept': 'application/json'
                            },
                            body: JSON.stringify({
                                ...data,
                                cart: <%- JSON.stringify(cart || []) %>
                            })
                        });

                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }

                        const result = await response.json();

                        if (!result.success) {
                            throw new Error(result.message || 'Checkout failed');
                        }

                        await handlePaymentVerification(result, notification, updateNotification);

                    } catch (error) {
                        console.error('Checkout error:', error);
                        updateNotification('Error', 
                            `Checkout failed: ${error.message || 'Please try again later'}`, 
                            'danger'
                        );
                        setTimeout(() => notification.remove(), 3000);
                    }
                }
            );
        } catch (error) {
            console.error('Form processing error:', error);
            showNotification('Error', 'An unexpected error occurred', 'danger');
        }
    });

    function validateFormData(data) {
        const requiredFields = {
            customerName: 'Name',
            customerEmail: 'Email',
            customerPhone: 'Phone',
            customerLocation: 'Location',
            cartTotal: 'Cart Total'
        };

        for (const [field, label] of Object.entries(requiredFields)) {
            if (!data[field]?.trim()) {
                showNotification('Error', `${label} is required`, 'danger');
                return false;
            }
        }

        if (!emailRegex.test(data.customerEmail)) {
            showNotification('Error', 'Please enter a valid email address', 'danger');
            return false;
        }

        if (!phoneRegex.test(data.customerPhone)) {
            showNotification('Error', 'Please enter a valid phone number', 'danger');
            return false;
        }

        if (isNaN(data.cartTotal) || Number(data.cartTotal) <= 0) {
            showNotification('Error', 'Invalid cart total', 'danger');
            return false;
        }

        return true;
    }

    async function handlePaymentVerification(result, notification, updateNotification) {
        const maxAttempts = 60; // 5 minutes with 5-second intervals
        let attempts = 0;
        const transactionRequestId = result.transaction_request_id;

        updateNotification('Success', 
            'Order created! Please complete the payment on your phone.', 
            'success'
        );

        const checkStatus = async () => {
            try {
                const statusResponse = await fetch('/transaction-status', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({ transaction_request_id: transactionRequestId })
                });

                if (!statusResponse.ok) {
                    throw new Error('Status check failed');
                }

                const statusResult = await statusResponse.json();

                if (statusResult.success && statusResult.status === 'Completed') {
                    updateNotification('Success', 'Payment confirmed!', 'success');
                    setTimeout(() => {
                        notification.remove();
                        window.location.href = `/order-confirmation?transactionId=${transactionRequestId}`;
                    }, 2000);
                    return true;
                }

                if (!statusResult.success && statusResult.status !== 'Pending') {
                    updateNotification('Error', 
                        `Payment failed: ${statusResult.details?.TransactionStatus || 'Cancelled'}`,
                        'danger'
                    );
                    setTimeout(() => notification.remove(), 3000);
                    return true;
                }

                return false;
            } catch (error) {
                console.error('Status check error:', error);
                return false;
            }
        };

        const pollStatus = setInterval(async () => {
            attempts++;
            const isComplete = await checkStatus();

            if (isComplete || attempts >= maxAttempts) {
                clearInterval(pollStatus);
                if (attempts >= maxAttempts) {
                    updateNotification('Warning', 
                        'Payment verification timed out. Please check your order status.',
                        'warning'
                    );
                    setTimeout(() => notification.remove(), 3000);
                }
            }
        }, 5000);
    }
});
  </script>
</body>
</html>